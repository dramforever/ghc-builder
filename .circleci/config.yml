version: 2
jobs:
    build:
        docker:
            - image: circleci/node:latest
        steps:
            - checkout
            - run:
                name: Get source
                command: |
                    git clone --recursive git://git.haskell.org/ghc.git
                    cd ghc
                    git checkout $(cat revision.txt) --
                    cd ..
            - run:
                name: Install Nix
                command: |
                    export LANG=C
                    export USER=`whoami`

                    curl https://nixos.org/nix/install > install-nix.sh
                    bash install-nix.sh

                    echo 'export LANG=C' >> ~/env.sh
                    echo 'export USER=`whoami`' >> ~/env.sh
                    echo "unset NIX_PATH" >> ~/env.sh
                    echo "export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> ~/env.sh
                    echo "source ~/.nix-profile/etc/profile.d/nix.sh" >> ~/env.sh
            - run:
                name: Basic setup
                command: |
                    source ~/env.sh
                    nix-env -i bash
            - run:
                name: Parse version
                command: |
                    source ~/env.sh
                    VER_PREFIX=$(grep '^AC_INIT' ghc/configure.ac | cut -d[ -f3 | cut -d] -f1)
                    REV=$(cat revision.txt)
                    VER_SUFFIX=${REV:0:6}
                    echo ${VER_PREFIX}.${VER_SUFFIX} > version.txt
                    echo Building GHC as version: $(cat version.txt)
            - run:
                name: Setup build environment
                command: |
                    source ~/env.sh
                    nix-shell --argstr version $(cat version.txt) --run "echo OK"
            - run:
                name: Build GHC
                command: |
                    source ~/env.sh
                    nix-build --argstr version $(cat version.txt) -A ghc.all
            - run:
                name: Dump artifact
                command: |
                    source ~/env.sh
                    mkdir dump
                    nix-push --dest dump result result-doc
                    mkdir artifacts
                    tar -cJf artifacts/cache.tar.xz dump/
            - store_artifacts:
                path: ./artifacts

